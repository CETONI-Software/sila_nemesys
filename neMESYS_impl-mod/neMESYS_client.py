#!/usr/bin/env python3
"""
________________________________________________________________________

:PROJECT: SiLA2_python

*neMESYS client*

:details: neMESYS:
    This is a test service for neMESYS syringe pumps via SiLA2
           
:file:    neMESYS_client.py
:authors: Florian Meinicke

:date: (creation)          2019-07-16T11:11:31.346060
:date: (last modification) 2019-07-16T11:11:31.346060

.. note:: Code generated by SiLA2CodeGenerator 0.2.0

_______________________________________________________________________

**Copyright**:
  This file is provided "AS IS" with NO WARRANTY OF ANY KIND,
  INCLUDING THE WARRANTIES OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

  For further Information see LICENSE file that comes with this distribution.
________________________________________________________________________
"""
__version__ = "0.0.1"

# import general packages
import logging
import argparse
import grpc

# import meta packages
from typing import Union

# import SiLA2 library modules
from sila2lib import SiLAFramework_pb2 as fwpb2
from sila2lib.sila_client import SiLA2Client
from sila2lib.std_features import SiLAService_pb2 as spb2
from sila2lib.std_features import SimulationController_pb2 as scpb2

# import feature gRPC modules
# Import gRPC libraries of features
from PumpDriveControlService.gRPC import PumpDriveControlService_pb2
from PumpDriveControlService.gRPC import PumpDriveControlService_pb2_grpc
# import default arguments for this feature
from PumpDriveControlService.PumpDriveControlService_default_arguments import default_dict as PumpDriveControlService_default_dict
from PumpUnitController.gRPC import PumpUnitController_pb2
from PumpUnitController.gRPC import PumpUnitController_pb2_grpc
# import default arguments for this feature
from PumpUnitController.PumpUnitController_default_arguments import default_dict as PumpUnitController_default_dict
from PumpFluidDosingService.gRPC import PumpFluidDosingService_pb2
from PumpFluidDosingService.gRPC import PumpFluidDosingService_pb2_grpc
# import default arguments for this feature
from PumpFluidDosingService.PumpFluidDosingService_default_arguments import default_dict as PumpFluidDosingService_default_dict
from SyringeConfigurationController.gRPC import SyringeConfigurationController_pb2
from SyringeConfigurationController.gRPC import SyringeConfigurationController_pb2_grpc
# import default arguments for this feature
from SyringeConfigurationController.SyringeConfigurationController_default_arguments import default_dict as SyringeConfigurationController_default_dict
from ValvePositionController.gRPC import ValvePositionController_pb2
from ValvePositionController.gRPC import ValvePositionController_pb2_grpc
# import default arguments for this feature
from ValvePositionController.ValvePositionController_default_arguments import default_dict as ValvePositionController_default_dict


# noinspection PyPep8Naming, PyUnusedLocal
class neMESYSClient(SiLA2Client):
    """
        This is a test service for neMESYS syringe pumps via SiLA2

    .. note:: For an example on how to construct the parameter or read the response(s) for command calls and properties,
              compare the default dictionary that is stored in the directory of the corresponding feature.
    """
    # The following variables will be filled when run() is executed
    #: Storage for the connected servers version
    server_version: str = ''
    #: Storage for the display name of the connected server
    server_display_name: str = ''
    #: Storage for the description of the connected server
    server_description: str = ''

    def __init__(
            self,
            name="neMESYSClient",
            service_name=None,
            sila_hostname="localhost",
            description="Description: This is a SiLA2 test client",
            UUID=None,
            version=__version__,
            vendor_URL="cetoni.de",
            ip='127.0.0.1', port=50053,
            key=None, cert=None
    ):
        """Class initialiser"""
        super().__init__(
            name=name,
            service_name=service_name,
            description=description,
            UUID=UUID,
            version=version,
            sila_hostname=sila_hostname,
            vendor_URL=vendor_URL,
            ip=ip, port=port,
            key=key, cert=cert
        )

        logging.info(
            "Starting SiLA2 service client for service neMESYS with service name: {server_name}".format(
                server_name=name
            )
        )

        # Create stub objects used to communicate with the server
        self.PumpDriveControlService_serv_stub = \
            PumpDriveControlService_pb2_grpc.PumpDriveControlServiceStub(self.channel)
        self.PumpUnitController_serv_stub = \
            PumpUnitController_pb2_grpc.PumpUnitControllerStub(self.channel)
        self.PumpFluidDosingService_serv_stub = \
            PumpFluidDosingService_pb2_grpc.PumpFluidDosingServiceStub(self.channel)
        self.SyringeConfigurationController_serv_stub = \
            SyringeConfigurationController_pb2_grpc.SyringeConfigurationControllerStub(self.channel)
        self.ValvePositionController_serv_stub = \
            ValvePositionController_pb2_grpc.ValvePositionControllerStub(self.channel)

        # initialise class variables for server information storage
        self.server_version: str = ''
        self.server_display_name = ''
        self.server_description = ''

    def Get_ImplementedFeatures(self):
        """Get a list of all implemented features."""
        # type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Retrieving the list of implemented features of the server:")
        try:
            response = self.SiLAService_serv_stub.Get_ImplementedFeatures(spb2.ImplementedFeatures_Parameters())
            for feature_id in response.ImplementedFeatures:
                logging.debug("Implemented feature: {feature_id}".format(
                    feature_id=feature_id.FeatureIdentifier.value)
                    )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response.ImplementedFeatures

    def Get_FeatureDefinition(self, feature_identifier: str) -> Union[str, None]:
        """
        Returns the FDL/XML feature definition of the given feature.

        :param feature_identifier: The name of the feature for which the definition should be returned.
        """
        # type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Requesting feature definitions of feature {feature_identifier}:".format(
            feature_identifier=feature_identifier)
        )
        try:
            response = self.SiLAService_serv_stub.GetFeatureDefinition(
                spb2.GetFeatureDefinition_Parameters(
                    QualifiedFeatureIdentifier=spb2.DataType_FeatureIdentifier(
                        FeatureIdentifier=fwpb2.String(value=feature_identifier)
                    )
                )
            )
            logging.debug("Response of GetFeatureDefinition for {feature_identifier} feature: {response}".format(
                response=response,
                feature_identifier=feature_identifier)
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

    def run(self) -> bool:
        """
        Starts the actual client and retrieves the meta-information from the server.

        :returns: True or False whether the connection to the server is established.
        """
        # type definition, just for convenience
        grpc_err: grpc.Call

        try:
            # Retrieve the basic server information and store it in internal class variables
            #   Display name
            response = self.SiLAService_serv_stub.Get_ServerName(spb2.ServerName_Parameters())
            self.server_display_name = response.ServerName.value
            logging.debug("Display name: {name}".format(name=response.ServerName.value))
            # Server description
            response = self.SiLAService_serv_stub.Get_ServerDescription(spb2.ServerDescription_Parameters())
            self.server_description = response.ServerDescription.value
            logging.debug("Description: {description}".format(description=response.ServerDescription.value))
            # Server version
            response = self.SiLAService_serv_stub.Get_ServerVersion(spb2.ServerVersion_Parameters())
            self.server_version = response.ServerVersion.value
            logging.debug("Version: {version}".format(version=response.ServerVersion.value))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return False

        return True
            
    def InitializePumpDrive(self,
                      parameter: PumpDriveControlService_pb2.InitializePumpDrive_Parameters = None) \
            -> PumpDriveControlService_pb2.InitializePumpDrive_Responses:
        """
        Wrapper to call the unobservable command InitializePumpDrive on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling InitializePumpDrive:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = PumpDriveControlService_pb2.InitializePumpDrive_Parameters(
                    **PumpDriveControlService_default_dict['InitializePumpDrive_Parameters']
                )
    
            response = self.PumpDriveControlService_serv_stub.InitializePumpDrive(parameter)
    
            logging.debug('InitializePumpDrive response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def EnablePumpDrive(self,
                      parameter: PumpDriveControlService_pb2.EnablePumpDrive_Parameters = None) \
            -> PumpDriveControlService_pb2.EnablePumpDrive_Responses:
        """
        Wrapper to call the unobservable command EnablePumpDrive on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling EnablePumpDrive:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = PumpDriveControlService_pb2.EnablePumpDrive_Parameters(
                    **PumpDriveControlService_default_dict['EnablePumpDrive_Parameters']
                )
    
            response = self.PumpDriveControlService_serv_stub.EnablePumpDrive(parameter)
    
            logging.debug('EnablePumpDrive response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def DisablePumpDrive(self,
                      parameter: PumpDriveControlService_pb2.DisablePumpDrive_Parameters = None) \
            -> PumpDriveControlService_pb2.DisablePumpDrive_Responses:
        """
        Wrapper to call the unobservable command DisablePumpDrive on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling DisablePumpDrive:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = PumpDriveControlService_pb2.DisablePumpDrive_Parameters(
                    **PumpDriveControlService_default_dict['DisablePumpDrive_Parameters']
                )
    
            response = self.PumpDriveControlService_serv_stub.DisablePumpDrive(parameter)
    
            logging.debug('DisablePumpDrive response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def SetFlowUnit(self,
                      parameter: PumpUnitController_pb2.SetFlowUnit_Parameters = None) \
            -> PumpUnitController_pb2.SetFlowUnit_Responses:
        """
        Wrapper to call the unobservable command SetFlowUnit on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling SetFlowUnit:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = PumpUnitController_pb2.SetFlowUnit_Parameters(
                    **PumpUnitController_default_dict['SetFlowUnit_Parameters']
                )
    
            response = self.PumpUnitController_serv_stub.SetFlowUnit(parameter)
    
            logging.debug('SetFlowUnit response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def SetVolumeUnit(self,
                      parameter: PumpUnitController_pb2.SetVolumeUnit_Parameters = None) \
            -> PumpUnitController_pb2.SetVolumeUnit_Responses:
        """
        Wrapper to call the unobservable command SetVolumeUnit on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling SetVolumeUnit:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = PumpUnitController_pb2.SetVolumeUnit_Parameters(
                    **PumpUnitController_default_dict['SetVolumeUnit_Parameters']
                )
    
            response = self.PumpUnitController_serv_stub.SetVolumeUnit(parameter)
    
            logging.debug('SetVolumeUnit response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def SetFillLevel(self,
                      parameter: PumpFluidDosingService_pb2.SetFillLevel_Parameters = None) \
            -> fwpb2.CommandConfirmation:
        """
        Wrapper to call the observable command SetFillLevel on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A command confirmation object with the following information:
            commandId: A command id with which this observable command can be referenced in future calls
            lifetimeOfExecution (optional): The (maximum) lifetime of this command call.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling SetFillLevel:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = PumpFluidDosingService_pb2.SetFillLevel_Parameters(
                    **PumpFluidDosingService_default_dict['SetFillLevel_Parameters']
                )
    
            response = self.PumpFluidDosingService_serv_stub.SetFillLevel(parameter)
    
            logging.debug('SetFillLevel response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def SetFillLevel_Info(self,
                           uuid: Union[str, fwpb2.CommandExecutionUUID]) \
            -> fwpb2.ExecutionInfo:
        """
        Wrapper to get an intermediate response for the observable command SetFillLevel on the server.
    
        :param uuid: The UUID that has been returned with the first command call. Can be given as string or as the
                     corresponding SiLA2 gRPC object.
    
        :returns: A gRPC object with the status information that has been defined for this command. The following fields
                  are defined:
                    * *commandStatus*: Status of the command (enumeration)
                    * *progressInfo*: Information on the progress of the command (0 to 1)
                    * *estimatedRemainingTime*: Estimate of the remaining time required to run the command
                    * *updatedLifetimeOfExecution*: An update on the execution lifetime
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        if type(uuid) is str:
            uuid = fwpb2.CommandExecutionUUID(commandId=uuid)
    
        logging.debug(
            "Requesting status information for command SetFillLevel (UUID={uuid}):".format(
                uuid=uuid.commandId
            )
        )
        try:
            response = self.PumpFluidDosingService_serv_stub.SetFillLevel_Info(uuid)
            logging.debug('SetFillLevel status information: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def SetFillLevel_Result(self,
                             uuid: Union[str, fwpb2.CommandExecutionUUID]) \
            -> PumpFluidDosingService_pb2.SetFillLevel_Responses:
        """
        Wrapper to get an intermediate response for the observable command SetFillLevel on the server.
    
        :param uuid: The UUID that has been returned with the first command call. Can be given as string or as the
                     corresponding SiLA2 gRPC object.
    
        :returns: A gRPC object with the result response that has been defined for this command.
    
        .. note:: Whether the result is available or not can and should be evaluated by calling the
                  :meth:`SetFillLevel_Info` method of this call.
        """
        if type(uuid) is str:
            uuid = fwpb2.CommandExecutionUUID(commandId=uuid)
    
        logging.debug(
            "Requesting status information for command SetFillLevel (UUID={uuid}):".format(
                uuid=uuid.commandId
            )
        )
    
        try:
            response = self.PumpFluidDosingService_serv_stub.SetFillLevel_Result(uuid)
            logging.debug('SetFillLevel result response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def DoseVolume(self,
                      parameter: PumpFluidDosingService_pb2.DoseVolume_Parameters = None) \
            -> fwpb2.CommandConfirmation:
        """
        Wrapper to call the observable command DoseVolume on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A command confirmation object with the following information:
            commandId: A command id with which this observable command can be referenced in future calls
            lifetimeOfExecution (optional): The (maximum) lifetime of this command call.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling DoseVolume:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = PumpFluidDosingService_pb2.DoseVolume_Parameters(
                    **PumpFluidDosingService_default_dict['DoseVolume_Parameters']
                )
    
            response = self.PumpFluidDosingService_serv_stub.DoseVolume(parameter)
    
            logging.debug('DoseVolume response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def DoseVolume_Info(self,
                           uuid: Union[str, fwpb2.CommandExecutionUUID]) \
            -> fwpb2.ExecutionInfo:
        """
        Wrapper to get an intermediate response for the observable command DoseVolume on the server.
    
        :param uuid: The UUID that has been returned with the first command call. Can be given as string or as the
                     corresponding SiLA2 gRPC object.
    
        :returns: A gRPC object with the status information that has been defined for this command. The following fields
                  are defined:
                    * *commandStatus*: Status of the command (enumeration)
                    * *progressInfo*: Information on the progress of the command (0 to 1)
                    * *estimatedRemainingTime*: Estimate of the remaining time required to run the command
                    * *updatedLifetimeOfExecution*: An update on the execution lifetime
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        if type(uuid) is str:
            uuid = fwpb2.CommandExecutionUUID(commandId=uuid)
    
        logging.debug(
            "Requesting status information for command DoseVolume (UUID={uuid}):".format(
                uuid=uuid.commandId
            )
        )
        try:
            response = self.PumpFluidDosingService_serv_stub.DoseVolume_Info(uuid)
            logging.debug('DoseVolume status information: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def DoseVolume_Result(self,
                             uuid: Union[str, fwpb2.CommandExecutionUUID]) \
            -> PumpFluidDosingService_pb2.DoseVolume_Responses:
        """
        Wrapper to get an intermediate response for the observable command DoseVolume on the server.
    
        :param uuid: The UUID that has been returned with the first command call. Can be given as string or as the
                     corresponding SiLA2 gRPC object.
    
        :returns: A gRPC object with the result response that has been defined for this command.
    
        .. note:: Whether the result is available or not can and should be evaluated by calling the
                  :meth:`DoseVolume_Info` method of this call.
        """
        if type(uuid) is str:
            uuid = fwpb2.CommandExecutionUUID(commandId=uuid)
    
        logging.debug(
            "Requesting status information for command DoseVolume (UUID={uuid}):".format(
                uuid=uuid.commandId
            )
        )
    
        try:
            response = self.PumpFluidDosingService_serv_stub.DoseVolume_Result(uuid)
            logging.debug('DoseVolume result response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def GenerateFlow(self,
                      parameter: PumpFluidDosingService_pb2.GenerateFlow_Parameters = None) \
            -> fwpb2.CommandConfirmation:
        """
        Wrapper to call the observable command GenerateFlow on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A command confirmation object with the following information:
            commandId: A command id with which this observable command can be referenced in future calls
            lifetimeOfExecution (optional): The (maximum) lifetime of this command call.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling GenerateFlow:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = PumpFluidDosingService_pb2.GenerateFlow_Parameters(
                    **PumpFluidDosingService_default_dict['GenerateFlow_Parameters']
                )
    
            response = self.PumpFluidDosingService_serv_stub.GenerateFlow(parameter)
    
            logging.debug('GenerateFlow response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def GenerateFlow_Info(self,
                           uuid: Union[str, fwpb2.CommandExecutionUUID]) \
            -> fwpb2.ExecutionInfo:
        """
        Wrapper to get an intermediate response for the observable command GenerateFlow on the server.
    
        :param uuid: The UUID that has been returned with the first command call. Can be given as string or as the
                     corresponding SiLA2 gRPC object.
    
        :returns: A gRPC object with the status information that has been defined for this command. The following fields
                  are defined:
                    * *commandStatus*: Status of the command (enumeration)
                    * *progressInfo*: Information on the progress of the command (0 to 1)
                    * *estimatedRemainingTime*: Estimate of the remaining time required to run the command
                    * *updatedLifetimeOfExecution*: An update on the execution lifetime
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        if type(uuid) is str:
            uuid = fwpb2.CommandExecutionUUID(commandId=uuid)
    
        logging.debug(
            "Requesting status information for command GenerateFlow (UUID={uuid}):".format(
                uuid=uuid.commandId
            )
        )
        try:
            response = self.PumpFluidDosingService_serv_stub.GenerateFlow_Info(uuid)
            logging.debug('GenerateFlow status information: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def GenerateFlow_Result(self,
                             uuid: Union[str, fwpb2.CommandExecutionUUID]) \
            -> PumpFluidDosingService_pb2.GenerateFlow_Responses:
        """
        Wrapper to get an intermediate response for the observable command GenerateFlow on the server.
    
        :param uuid: The UUID that has been returned with the first command call. Can be given as string or as the
                     corresponding SiLA2 gRPC object.
    
        :returns: A gRPC object with the result response that has been defined for this command.
    
        .. note:: Whether the result is available or not can and should be evaluated by calling the
                  :meth:`GenerateFlow_Info` method of this call.
        """
        if type(uuid) is str:
            uuid = fwpb2.CommandExecutionUUID(commandId=uuid)
    
        logging.debug(
            "Requesting status information for command GenerateFlow (UUID={uuid}):".format(
                uuid=uuid.commandId
            )
        )
    
        try:
            response = self.PumpFluidDosingService_serv_stub.GenerateFlow_Result(uuid)
            logging.debug('GenerateFlow result response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def StopDosage(self,
                      parameter: PumpFluidDosingService_pb2.StopDosage_Parameters = None) \
            -> PumpFluidDosingService_pb2.StopDosage_Responses:
        """
        Wrapper to call the unobservable command StopDosage on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling StopDosage:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = PumpFluidDosingService_pb2.StopDosage_Parameters(
                    **PumpFluidDosingService_default_dict['StopDosage_Parameters']
                )
    
            response = self.PumpFluidDosingService_serv_stub.StopDosage(parameter)
    
            logging.debug('StopDosage response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def SetSyringeParameters(self,
                      parameter: SyringeConfigurationController_pb2.SetSyringeParameters_Parameters = None) \
            -> SyringeConfigurationController_pb2.SetSyringeParameters_Responses:
        """
        Wrapper to call the unobservable command SetSyringeParameters on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling SetSyringeParameters:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = SyringeConfigurationController_pb2.SetSyringeParameters_Parameters(
                    **SyringeConfigurationController_default_dict['SetSyringeParameters_Parameters']
                )
    
            response = self.SyringeConfigurationController_serv_stub.SetSyringeParameters(parameter)
    
            logging.debug('SetSyringeParameters response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def SwitchToPosition(self,
                      parameter: ValvePositionController_pb2.SwitchToPosition_Parameters = None) \
            -> ValvePositionController_pb2.SwitchToPosition_Responses:
        """
        Wrapper to call the unobservable command SwitchToPosition on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling SwitchToPosition:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = ValvePositionController_pb2.SwitchToPosition_Parameters(
                    **ValvePositionController_default_dict['SwitchToPosition_Parameters']
                )
    
            response = self.ValvePositionController_serv_stub.SwitchToPosition(parameter)
    
            logging.debug('SwitchToPosition response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def TogglePosition(self,
                      parameter: ValvePositionController_pb2.TogglePosition_Parameters = None) \
            -> ValvePositionController_pb2.TogglePosition_Responses:
        """
        Wrapper to call the unobservable command TogglePosition on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling TogglePosition:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = ValvePositionController_pb2.TogglePosition_Parameters(
                    **ValvePositionController_default_dict['TogglePosition_Parameters']
                )
    
            response = self.ValvePositionController_serv_stub.TogglePosition(parameter)
    
            logging.debug('TogglePosition response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    

    def Subscribe_PumpDriveState(self) -> PumpDriveControlService_pb2.Subscribe_PumpDriveState_Responses:
        """Wrapper to get property PumpDriveState from the server."""
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Reading observable property PumpDriveState:")
        try:
            response = self.PumpDriveControlService_serv_stub.Subscribe_PumpDriveState(
                PumpDriveControlService_pb2.Subscribe_PumpDriveState_Parameters()
            )
            logging.debug(
                'Subscribe_PumpDriveState response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    def Subscribe_FaultState(self) -> PumpDriveControlService_pb2.Subscribe_FaultState_Responses:
        """Wrapper to get property FaultState from the server."""
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Reading observable property FaultState:")
        try:
            response = self.PumpDriveControlService_serv_stub.Subscribe_FaultState(
                PumpDriveControlService_pb2.Subscribe_FaultState_Parameters()
            )
            logging.debug(
                'Subscribe_FaultState response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    def Subscribe_FlowUnit(self) -> PumpUnitController_pb2.Subscribe_FlowUnit_Responses:
        """Wrapper to get property FlowUnit from the server."""
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Reading observable property FlowUnit:")
        try:
            response = self.PumpUnitController_serv_stub.Subscribe_FlowUnit(
                PumpUnitController_pb2.Subscribe_FlowUnit_Parameters()
            )
            logging.debug(
                'Subscribe_FlowUnit response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    def Subscribe_VolumeUnit(self) -> PumpUnitController_pb2.Subscribe_VolumeUnit_Responses:
        """Wrapper to get property VolumeUnit from the server."""
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Reading observable property VolumeUnit:")
        try:
            response = self.PumpUnitController_serv_stub.Subscribe_VolumeUnit(
                PumpUnitController_pb2.Subscribe_VolumeUnit_Parameters()
            )
            logging.debug(
                'Subscribe_VolumeUnit response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    def Get_MaxSyringeFillLevel(self) -> PumpFluidDosingService_pb2.Get_MaxSyringeFillLevel_Responses:
        """Wrapper to get property MaxSyringeFillLevel from the server."""
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Reading unobservable property MaxSyringeFillLevel:")
        try:
            response = self.PumpFluidDosingService_serv_stub.Get_MaxSyringeFillLevel(
                PumpFluidDosingService_pb2.Get_MaxSyringeFillLevel_Parameters()
            )
            logging.debug(
                'Get_MaxSyringeFillLevel response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    def Subscribe_SyringeFillLevel(self) -> PumpFluidDosingService_pb2.Subscribe_SyringeFillLevel_Responses:
        """Wrapper to get property SyringeFillLevel from the server."""
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Reading observable property SyringeFillLevel:")
        try:
            response = self.PumpFluidDosingService_serv_stub.Subscribe_SyringeFillLevel(
                PumpFluidDosingService_pb2.Subscribe_SyringeFillLevel_Parameters()
            )
            logging.debug(
                'Subscribe_SyringeFillLevel response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    def Get_MaxFlowRate(self) -> PumpFluidDosingService_pb2.Get_MaxFlowRate_Responses:
        """Wrapper to get property MaxFlowRate from the server."""
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Reading unobservable property MaxFlowRate:")
        try:
            response = self.PumpFluidDosingService_serv_stub.Get_MaxFlowRate(
                PumpFluidDosingService_pb2.Get_MaxFlowRate_Parameters()
            )
            logging.debug(
                'Get_MaxFlowRate response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    def Subscribe_FlowRate(self) -> PumpFluidDosingService_pb2.Subscribe_FlowRate_Responses:
        """Wrapper to get property FlowRate from the server."""
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Reading observable property FlowRate:")
        try:
            response = self.PumpFluidDosingService_serv_stub.Subscribe_FlowRate(
                PumpFluidDosingService_pb2.Subscribe_FlowRate_Parameters()
            )
            logging.debug(
                'Subscribe_FlowRate response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    def Subscribe_InnerDiameter(self) -> SyringeConfigurationController_pb2.Subscribe_InnerDiameter_Responses:
        """Wrapper to get property InnerDiameter from the server."""
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Reading observable property InnerDiameter:")
        try:
            response = self.SyringeConfigurationController_serv_stub.Subscribe_InnerDiameter(
                SyringeConfigurationController_pb2.Subscribe_InnerDiameter_Parameters()
            )
            logging.debug(
                'Subscribe_InnerDiameter response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    def Subscribe_MaxPistonStroke(self) -> SyringeConfigurationController_pb2.Subscribe_MaxPistonStroke_Responses:
        """Wrapper to get property MaxPistonStroke from the server."""
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Reading observable property MaxPistonStroke:")
        try:
            response = self.SyringeConfigurationController_serv_stub.Subscribe_MaxPistonStroke(
                SyringeConfigurationController_pb2.Subscribe_MaxPistonStroke_Parameters()
            )
            logging.debug(
                'Subscribe_MaxPistonStroke response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    def Get_NumberOfPositions(self) -> ValvePositionController_pb2.Get_NumberOfPositions_Responses:
        """Wrapper to get property NumberOfPositions from the server."""
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Reading unobservable property NumberOfPositions:")
        try:
            response = self.ValvePositionController_serv_stub.Get_NumberOfPositions(
                ValvePositionController_pb2.Get_NumberOfPositions_Parameters()
            )
            logging.debug(
                'Get_NumberOfPositions response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    def Subscribe_Position(self) -> ValvePositionController_pb2.Subscribe_Position_Responses:
        """Wrapper to get property Position from the server."""
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Reading observable property Position:")
        try:
            response = self.ValvePositionController_serv_stub.Subscribe_Position(
                ValvePositionController_pb2.Subscribe_Position_Parameters()
            )
            logging.debug(
                'Subscribe_Position response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    

    @staticmethod
    def grpc_error_handling(error_object: grpc.Call):
        """Handles exceptions of type grpc.RpcError"""
        logging.exception(
            (
                'Error during gRPC communication.' '\n'
                '\t' 'Status code: {error_code}' '\n'
                '\t' 'Details: {error_details}' '\n'

            ).format(error_code=error_object.code(), error_details=error_object.details())
        )


def parse_command_line():
    """
    Just looking for command line arguments
    """
    parser = argparse.ArgumentParser(description="A SiLA2 client: neMESYS")
    parser.add_argument('-s', '--server-name', action='store',
                        help='SiLA server to connect with [server-name]', default="neMESYS")
    parser.add_argument('-v', '--version', action='version', version='%(prog)s ' + __version__)
    
    return parser.parse_args()


if __name__ == '__main__':
    # or use logging.INFO (=20) or logging.ERROR (=30) for less output
    logging.basicConfig(format='%(levelname)s| %(module)s.%(funcName)s: %(message)s', level=logging.DEBUG)
    
    parsed_args = parse_command_line()

    # start the server
    sila_client = neMESYSClient(name=parsed_args.server_name, ip='127.0.0.1', port=50053)
    sila_client.run()

    # Log connection info
    logging.info(
        (
            'Connected to SiLA Server {display_name} running in version {version}.' '\n'
            'Service description: {service_description}'
        ).format(
            display_name=sila_client.server_display_name,
            version=sila_client.server_version,
            service_description=sila_client.server_description
        )
    )

    # TODO:
    #   Write your further function calls here to run the client as a standalone application.
